# Built-in libraries
# import time
import pickle, os

#External libraries for Reddit use

# Personal scripts and files
from offender import Offender

# def check(author, user_exists):
def check(author):
    '''
    Iterates through all the offenders and adds them to the offender list if not already in it.
    Does not add the offender if found before EOF.
    
    Returns whether or not the offender is a repeat offender (variable: user_exists)
    
    Variables:
    user_exists - boolean value of whether or not the offender exists in the list of offenders
    offenders_file - file containing a list of offender class instances
    offenders - offender list loaded from offenders_file
    new_offender - new class instance of an offender if they did not previously exist
    '''
    
    user_exists = False
    offenders_file = open('offenders', 'rb')
    
    #Check if the file is empty
    if not os.stat("offenders").st_size == 0:
        offenders = pickle.load(offenders_file)
    else:
        offenders = []

    # Search for if the author is a repeat offendor
    for offender in offenders:
        if offender.name == str(author):
            offender.count += 1
            user_exists = True
            print(offender.count)
            break
    
    # Create a new offender if they do not already exist in the list
    if user_exists == False:
        new_offender = Offender(str(author), 0)
        offenders.append(new_offender)
    
    offenders_file.close()
    offenders_file = open('offenders', 'wb')
        
    pickle.dump(offenders, offenders_file)
    
    offenders_file.close()
        
    return user_exists

# def update_count(author):
#     '''
#     Updates the offense count of the author
#     **IMPORTANT** In this context, the author variable is an object
#     
#     Variables:
#     author - author object from Reddit API
#     '''
#     return

# def reply_gen(author):
#     '''
#     Generates the reply. Inputs author class and outputs a reply containing count of offenses and a warning
#     
#     Variables:
#     reply - the reply generated by the bot
#     '''
#     
#     reply =''
#     
#     return reply

def srch(subreddit, KEYWORDS):
    '''
    Checks the 20 "hot" submissions in a subreddit for a keyword.
    Then, it will send the data to another function where an offender
    class will be created and user data is stored.
    
    Variables:
    submission - Reddit post submission
    comment - a comment in the submission
    author - the author of a comment
    split_comment - list of each word in the author's comment
    word - word in split_comment
    
    '''
    
    for submission in subreddit.hot(limit=20):
        submission.comments.replace_more(limit=None)
        submission.comments_sort = 'hot'
        
        for comment in submission.comments.list():
            author = comment.author
            split_comment = comment.body.lower().split(' ')
            
            for word in split_comment:
                
                if word in KEYWORDS:
                    print(str(author))
                    print(split_comment)
                    
                    user_exists = check(author)
                    
                    if user_exists == True:
                        continue
                    else:
#                         update_count(comment.author) #function that checks the sin count
#                         reply = reply_gen(comment.author) #function that replies to the author
                        return
            
    return